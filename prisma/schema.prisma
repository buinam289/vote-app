// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Topic {
  id       String      @id @default(cuid())
  question String
  options  Option[]
  tags     TopicTag[]
  totalVotes Int
  votes      Vote[]
}

model Option {
  id      String @id @default(cuid())
  text    String
  totalVotes   Int
  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id])
  votes   Vote[]
}

model Tag {
  id     String      @id @default(cuid())
  name   String      @unique
  topics TopicTag[]
}

model TopicTag {
  id      String @id @default(cuid())
  topicId String
  tagId   String
  topic   Topic  @relation(fields: [topicId], references: [id])
  tag     Tag    @relation(fields: [tagId], references: [id])

  @@unique([topicId, tagId])
}

model Vote {
  id      String @id @default(cuid())
  topicId String
  userId  String
  optionId String
  topic   Topic  @relation(fields: [topicId], references: [id])
  option  Option @relation(fields: [optionId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@unique([topicId, userId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  gender        String?
  city          String?
  accounts      Account[]
  sessions      Session[]
  Vote Vote[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId]) // Composite unique constraint for NextAuth
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token]) // Composite primary key
}